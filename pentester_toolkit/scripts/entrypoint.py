"""
Date: 8/4/21
Author: Emma Heffernan 
Description: Entrypoint python script which allows the user to select the tool to be used in the docker container
"""

# Requires to import the Operating System dependencies
import os
# Adding Colour codes for the tiles of the front of pentester toolkit
BBLACK = '\033[33;1m' # Bold Black Text
TBLACK = '\033[30m' # Black Text
ENDC = '\033[m' # Reset to the Defaults

# Input options lists the users options of tools to use
input_options=["Bash \t\tThis will give you a cmd prompt to run your own command", "Metasploit \tExploits", "MsfVenom \t\tExploits", "TShark \t\tNetwork Analyser", "Nmap \t\tNetwork Port Scanner", "Nikto \t\tCommandline Web Scanner", "John the Ripper \tPassword Cracking", "Burp Suite \tApplication Security Testing", "Impacket \t\tCollection of Python Exploits for Networks", "Reverse SSH \tExternal SSH Connection", "Ngrok \t\tRemote File System Access", "Curl \t\tData Transfer to or from a Server", "Network Scan \tScan an Entire Network and Output Results to File"]
# CMD options runs the corresponding bash script to the tool
cmd_options=["bash.sh", "msf.sh", "msfvenom.sh", "tshark.sh", "nmap.sh", "nikto.sh", "jtr.sh", "burpsuite.sh", "impacket.sh", "ssh.sh", "ngrok.sh", "curl.sh", "network.sh"]

# Function that returns the users choice, while also displaying all the options to them
def welcome_help():
    # Printing the three statements are the beginning of the greeting to the toolkit with first being Black Bolded text
    print (BBLACK + "\nHi, Welcome to the Pentester Toolkit!" ,ENDC)
    print ("Author: Emma Heffernan (@3mm4h3ff) ")
    print ("\nSelect one of the following tools or go your own using bash:\n")

    cnt=1
    # for loop which steps through the input options displaying them to the user
    for single_option in input_options:
        # Adding multi colour to the menu list options, variable of colour
        TCOLOR = '\033[3' + str(cnt % 6 + 1) + 'm'
        print(TCOLOR + format(cnt, "02"), "-", single_option)
        cnt=cnt+1
    # Printing option for user to exit the container
    print(ENDC + "\n0 - EXIT \t\tExits the container!\n\nYou may run one of these tools by typing its associated number")
    # Setting default option to -2 which means that if the user doesn't enter an option they are asked again
    user_option = -2
    # Asks the user for an input repeatly until that input is valid
    while not (user_option >= -1 and user_option <= len(input_options)) :
        print("Please enter a number or 0 to exit") 
        try:
            user_option = int(input("Selecting: "))
        except:
            print("[ERROR]: Must be a numeric value")
    # Returns the value of the selected option
    return int(user_option)
# Main Function
def main():
    # Setting the script directory
    scripts_dir='/home/scripts/'
    # Calling the welcome help function and setting the returned value
    sel_option = welcome_help()
    # If returned option is 0 exit the container
    if (sel_option == 0):
        print ("Exiting")
        exit()
    # Else starts the selected tool
    else:
        print ("Starting tool:", input_options[sel_option-1])
        os.system(scripts_dir + cmd_options[sel_option-1])
# Runs forever until users chooses to exit
while(1):
    main()