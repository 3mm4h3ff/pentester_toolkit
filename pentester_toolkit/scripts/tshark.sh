#!/bin/bash
# Author: Emma Heffernan
# Description: Enables the user to run a network analyser

TOOL_EXIT=0
# Running until the user wants to exit the tool
while [ $TOOL_EXIT == 0 ]; do 

    # Initialising the variables
    TSHARK_OUTPUT=""
    TSHARK_RUN=""

    # Creating titles and options list for user input
    echo ""
    echo "Commandline Wireshark - Tshark"
    echo ""
    echo "Please select 1 of the following options: "
    echo ""
    echo " 1. Capturing on Tshark Default Interface (int: eth0)"
    echo " 2. Run Tshark Manually via Bash Terminal"
    echo " 0. Exit Tshark"

    # Intaking the user input for above options
    read -e -p "Please enter an option: " USER_INPUT
    # Rely to the user what they entered
    echo "You entered: $USER_INPUT" 
    
    # Matching the options in the menu above, the user can input their option choice, first here being to exit the problem
    if [[ $USER_INPUT == 0 ]]; then
        TOOL_EXIT=1
    # Option 1 will bring the user directly to use default tshark on their machine
    elif [[ $USER_INPUT == 1 ]]; then
        # read -e -p "Please hit enter to continue for capturing on interface"
        TSHARK_OUTPUT="tshark"
        TSHARK_RUN=""
    # The user will be brought to a bash terminal where they can use tshark commands themselves
    elif [[ $USER_INPUT == 2 ]]; then
        # read -e -p "Please hit enter to continue to a Bash Terminal"
        TSHARK_OUTPUT="/home/scripts/bash.sh"
        TSHARK_RUN="tshark --help"
    else
        echo "Incorrect option, please try again!"
    fi
    # if user enters 0 if will exit however if the value is greater it will run the tshark output entered command with all variables attached
    if [[ TOOL_EXIT != 0 ]]; then
        $TSHARK_OUTPUT && $TSHARK_RUN
    fi
# End of the do while loop
done
